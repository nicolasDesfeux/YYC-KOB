/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-02T22:35:02.857Z")

@Api(value = "result", description = "the result API")
public interface ResultApi {

    @ApiOperation(value = "Add a new result", nickname = "addResult", notes = "", tags = {"Results",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "New game succesfully added"),
            @ApiResponse(code = 405, message = "Invalid input")})
    @RequestMapping(value = "/result",
            produces = {"text/plain"},
            consumes = {"application/x-www-form-urlencoded"},
            method = RequestMethod.POST)
    ResponseEntity<Void> addResult(@ApiParam(value = "Game for the result", required = true) @RequestParam(value = "gameId", required = true) String gameId, @ApiParam(value = "Player that participate in the game", required = true) @RequestParam(value = "playerId", required = true) String playerId, @ApiParam(value = "Result of the player for thegame", required = true) @RequestParam(value = "result", required = true) Integer result);


    @ApiOperation(value = "Deletes a Result", nickname = "deleteResult", notes = "", tags = {"Results",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Result not found")})
    @RequestMapping(value = "/result/{resultId}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteResult(@ApiParam(value = "Result id to delete", required = true) @PathVariable("resultId") Long resultId);


    @ApiOperation(value = "Finds a Game by Id", nickname = "getResultById", notes = "Returns a single game", response = String.class, tags = {"Results",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Game found", response = String.class),
            @ApiResponse(code = 404, message = "Game not found")})
    @RequestMapping(value = "/result/{resultId}",
            produces = {"text/plain"},
            method = RequestMethod.GET)
    ResponseEntity<String> getResultById(@ApiParam(value = "ID of game to return", required = true) @PathVariable("resultId") Long resultId);


    @ApiOperation(value = "Updates a game date", nickname = "updateResultWithForm", notes = "", tags = {"Results",})
    @ApiResponses(value = {
            @ApiResponse(code = 405, message = "Invalid input")})
    @RequestMapping(value = "/result/{resultId}",
            produces = {"text/plain"},
            consumes = {"application/x-www-form-urlencoded"},
            method = RequestMethod.POST)
    ResponseEntity<Void> updateResultWithForm(@ApiParam(value = "ID of result that needs to be updated", required = true) @PathVariable("resultId") Long resultId, @ApiParam(value = "Game for the result", required = true) @RequestParam(value = "gameId", required = true) String gameId, @ApiParam(value = "Player that participate in the game", required = true) @RequestParam(value = "playerId", required = true) String playerId, @ApiParam(value = "Result of the player for the game", required = true) @RequestParam(value = "result", required = true) Integer result);

}
